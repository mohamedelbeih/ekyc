# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rdi_liveness_detection_python
else:
    import _rdi_liveness_detection_python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rdi_liveness_detection_python.delete_SwigPyIterator

    def value(self):
        return _rdi_liveness_detection_python.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _rdi_liveness_detection_python.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _rdi_liveness_detection_python.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _rdi_liveness_detection_python.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _rdi_liveness_detection_python.SwigPyIterator_equal(self, x)

    def copy(self):
        return _rdi_liveness_detection_python.SwigPyIterator_copy(self)

    def next(self):
        return _rdi_liveness_detection_python.SwigPyIterator_next(self)

    def __next__(self):
        return _rdi_liveness_detection_python.SwigPyIterator___next__(self)

    def previous(self):
        return _rdi_liveness_detection_python.SwigPyIterator_previous(self)

    def advance(self, n):
        return _rdi_liveness_detection_python.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _rdi_liveness_detection_python.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _rdi_liveness_detection_python.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _rdi_liveness_detection_python.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _rdi_liveness_detection_python.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _rdi_liveness_detection_python.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _rdi_liveness_detection_python.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _rdi_liveness_detection_python:
_rdi_liveness_detection_python.SwigPyIterator_swigregister(SwigPyIterator)

Action_LOOKINGCENTER = _rdi_liveness_detection_python.Action_LOOKINGCENTER
Action_LOOKINGRIGHT = _rdi_liveness_detection_python.Action_LOOKINGRIGHT
Action_LOOKINGLEFT = _rdi_liveness_detection_python.Action_LOOKINGLEFT
Action_LOOKINGUP = _rdi_liveness_detection_python.Action_LOOKINGUP
Action_LOOKINGDOWN = _rdi_liveness_detection_python.Action_LOOKINGDOWN
Action_SMILING = _rdi_liveness_detection_python.Action_SMILING
Action_BLINKING = _rdi_liveness_detection_python.Action_BLINKING
class TimeSlot(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    start = property(_rdi_liveness_detection_python.TimeSlot_start_get, _rdi_liveness_detection_python.TimeSlot_start_set)
    end = property(_rdi_liveness_detection_python.TimeSlot_end_get, _rdi_liveness_detection_python.TimeSlot_end_set)

    def __init__(self):
        _rdi_liveness_detection_python.TimeSlot_swiginit(self, _rdi_liveness_detection_python.new_TimeSlot())
    __swig_destroy__ = _rdi_liveness_detection_python.delete_TimeSlot

# Register TimeSlot in _rdi_liveness_detection_python:
_rdi_liveness_detection_python.TimeSlot_swigregister(TimeSlot)

class LivenessResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    liveness = property(_rdi_liveness_detection_python.LivenessResult_liveness_get, _rdi_liveness_detection_python.LivenessResult_liveness_set)
    actions_percentage = property(_rdi_liveness_detection_python.LivenessResult_actions_percentage_get, _rdi_liveness_detection_python.LivenessResult_actions_percentage_set)

    def __init__(self):
        _rdi_liveness_detection_python.LivenessResult_swiginit(self, _rdi_liveness_detection_python.new_LivenessResult())
    __swig_destroy__ = _rdi_liveness_detection_python.delete_LivenessResult

# Register LivenessResult in _rdi_liveness_detection_python:
_rdi_liveness_detection_python.LivenessResult_swigregister(LivenessResult)


def initialize_model(model_path):
    return _rdi_liveness_detection_python.initialize_model(model_path)

def deinitialize_model(model_path):
    return _rdi_liveness_detection_python.deinitialize_model(model_path)

def liveness_check(*args):
    return _rdi_liveness_detection_python.liveness_check(*args)

def liveness_check_from_path(*args):
    return _rdi_liveness_detection_python.liveness_check_from_path(*args)

def get_model_information(model_path):
    return _rdi_liveness_detection_python.get_model_information(model_path)

def get_release_version():
    return _rdi_liveness_detection_python.get_release_version()
class Error(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    code = property(_rdi_liveness_detection_python.Error_code_get, _rdi_liveness_detection_python.Error_code_set)
    what = property(_rdi_liveness_detection_python.Error_what_get, _rdi_liveness_detection_python.Error_what_set)

    def __init__(self):
        _rdi_liveness_detection_python.Error_swiginit(self, _rdi_liveness_detection_python.new_Error())
    __swig_destroy__ = _rdi_liveness_detection_python.delete_Error

# Register Error in _rdi_liveness_detection_python:
_rdi_liveness_detection_python.Error_swigregister(Error)

class Liveness(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    result = property(_rdi_liveness_detection_python.Liveness_result_get, _rdi_liveness_detection_python.Liveness_result_set)
    error = property(_rdi_liveness_detection_python.Liveness_error_get, _rdi_liveness_detection_python.Liveness_error_set)

    def __init__(self):
        _rdi_liveness_detection_python.Liveness_swiginit(self, _rdi_liveness_detection_python.new_Liveness())
    __swig_destroy__ = _rdi_liveness_detection_python.delete_Liveness

# Register Liveness in _rdi_liveness_detection_python:
_rdi_liveness_detection_python.Liveness_swigregister(Liveness)

class StringResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    result = property(_rdi_liveness_detection_python.StringResult_result_get, _rdi_liveness_detection_python.StringResult_result_set)
    error = property(_rdi_liveness_detection_python.StringResult_error_get, _rdi_liveness_detection_python.StringResult_error_set)

    def __init__(self):
        _rdi_liveness_detection_python.StringResult_swiginit(self, _rdi_liveness_detection_python.new_StringResult())
    __swig_destroy__ = _rdi_liveness_detection_python.delete_StringResult

# Register StringResult in _rdi_liveness_detection_python:
_rdi_liveness_detection_python.StringResult_swigregister(StringResult)

class FloatList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _rdi_liveness_detection_python.FloatList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rdi_liveness_detection_python.FloatList___nonzero__(self)

    def __bool__(self):
        return _rdi_liveness_detection_python.FloatList___bool__(self)

    def __len__(self):
        return _rdi_liveness_detection_python.FloatList___len__(self)

    def __getslice__(self, i, j):
        return _rdi_liveness_detection_python.FloatList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rdi_liveness_detection_python.FloatList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rdi_liveness_detection_python.FloatList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rdi_liveness_detection_python.FloatList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rdi_liveness_detection_python.FloatList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rdi_liveness_detection_python.FloatList___setitem__(self, *args)

    def pop(self):
        return _rdi_liveness_detection_python.FloatList_pop(self)

    def append(self, x):
        return _rdi_liveness_detection_python.FloatList_append(self, x)

    def empty(self):
        return _rdi_liveness_detection_python.FloatList_empty(self)

    def size(self):
        return _rdi_liveness_detection_python.FloatList_size(self)

    def swap(self, v):
        return _rdi_liveness_detection_python.FloatList_swap(self, v)

    def begin(self):
        return _rdi_liveness_detection_python.FloatList_begin(self)

    def end(self):
        return _rdi_liveness_detection_python.FloatList_end(self)

    def rbegin(self):
        return _rdi_liveness_detection_python.FloatList_rbegin(self)

    def rend(self):
        return _rdi_liveness_detection_python.FloatList_rend(self)

    def clear(self):
        return _rdi_liveness_detection_python.FloatList_clear(self)

    def get_allocator(self):
        return _rdi_liveness_detection_python.FloatList_get_allocator(self)

    def pop_back(self):
        return _rdi_liveness_detection_python.FloatList_pop_back(self)

    def erase(self, *args):
        return _rdi_liveness_detection_python.FloatList_erase(self, *args)

    def __init__(self, *args):
        _rdi_liveness_detection_python.FloatList_swiginit(self, _rdi_liveness_detection_python.new_FloatList(*args))

    def push_back(self, x):
        return _rdi_liveness_detection_python.FloatList_push_back(self, x)

    def front(self):
        return _rdi_liveness_detection_python.FloatList_front(self)

    def back(self):
        return _rdi_liveness_detection_python.FloatList_back(self)

    def assign(self, n, x):
        return _rdi_liveness_detection_python.FloatList_assign(self, n, x)

    def resize(self, *args):
        return _rdi_liveness_detection_python.FloatList_resize(self, *args)

    def insert(self, *args):
        return _rdi_liveness_detection_python.FloatList_insert(self, *args)

    def reserve(self, n):
        return _rdi_liveness_detection_python.FloatList_reserve(self, n)

    def capacity(self):
        return _rdi_liveness_detection_python.FloatList_capacity(self)
    __swig_destroy__ = _rdi_liveness_detection_python.delete_FloatList

# Register FloatList in _rdi_liveness_detection_python:
_rdi_liveness_detection_python.FloatList_swigregister(FloatList)

class ActionList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _rdi_liveness_detection_python.ActionList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rdi_liveness_detection_python.ActionList___nonzero__(self)

    def __bool__(self):
        return _rdi_liveness_detection_python.ActionList___bool__(self)

    def __len__(self):
        return _rdi_liveness_detection_python.ActionList___len__(self)

    def __getslice__(self, i, j):
        return _rdi_liveness_detection_python.ActionList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rdi_liveness_detection_python.ActionList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rdi_liveness_detection_python.ActionList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rdi_liveness_detection_python.ActionList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rdi_liveness_detection_python.ActionList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rdi_liveness_detection_python.ActionList___setitem__(self, *args)

    def pop(self):
        return _rdi_liveness_detection_python.ActionList_pop(self)

    def append(self, x):
        return _rdi_liveness_detection_python.ActionList_append(self, x)

    def empty(self):
        return _rdi_liveness_detection_python.ActionList_empty(self)

    def size(self):
        return _rdi_liveness_detection_python.ActionList_size(self)

    def swap(self, v):
        return _rdi_liveness_detection_python.ActionList_swap(self, v)

    def begin(self):
        return _rdi_liveness_detection_python.ActionList_begin(self)

    def end(self):
        return _rdi_liveness_detection_python.ActionList_end(self)

    def rbegin(self):
        return _rdi_liveness_detection_python.ActionList_rbegin(self)

    def rend(self):
        return _rdi_liveness_detection_python.ActionList_rend(self)

    def clear(self):
        return _rdi_liveness_detection_python.ActionList_clear(self)

    def get_allocator(self):
        return _rdi_liveness_detection_python.ActionList_get_allocator(self)

    def pop_back(self):
        return _rdi_liveness_detection_python.ActionList_pop_back(self)

    def erase(self, *args):
        return _rdi_liveness_detection_python.ActionList_erase(self, *args)

    def __init__(self, *args):
        _rdi_liveness_detection_python.ActionList_swiginit(self, _rdi_liveness_detection_python.new_ActionList(*args))

    def push_back(self, x):
        return _rdi_liveness_detection_python.ActionList_push_back(self, x)

    def front(self):
        return _rdi_liveness_detection_python.ActionList_front(self)

    def back(self):
        return _rdi_liveness_detection_python.ActionList_back(self)

    def assign(self, n, x):
        return _rdi_liveness_detection_python.ActionList_assign(self, n, x)

    def resize(self, *args):
        return _rdi_liveness_detection_python.ActionList_resize(self, *args)

    def insert(self, *args):
        return _rdi_liveness_detection_python.ActionList_insert(self, *args)

    def reserve(self, n):
        return _rdi_liveness_detection_python.ActionList_reserve(self, n)

    def capacity(self):
        return _rdi_liveness_detection_python.ActionList_capacity(self)
    __swig_destroy__ = _rdi_liveness_detection_python.delete_ActionList

# Register ActionList in _rdi_liveness_detection_python:
_rdi_liveness_detection_python.ActionList_swigregister(ActionList)

class TimeSlotList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _rdi_liveness_detection_python.TimeSlotList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rdi_liveness_detection_python.TimeSlotList___nonzero__(self)

    def __bool__(self):
        return _rdi_liveness_detection_python.TimeSlotList___bool__(self)

    def __len__(self):
        return _rdi_liveness_detection_python.TimeSlotList___len__(self)

    def __getslice__(self, i, j):
        return _rdi_liveness_detection_python.TimeSlotList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rdi_liveness_detection_python.TimeSlotList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rdi_liveness_detection_python.TimeSlotList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rdi_liveness_detection_python.TimeSlotList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rdi_liveness_detection_python.TimeSlotList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rdi_liveness_detection_python.TimeSlotList___setitem__(self, *args)

    def pop(self):
        return _rdi_liveness_detection_python.TimeSlotList_pop(self)

    def append(self, x):
        return _rdi_liveness_detection_python.TimeSlotList_append(self, x)

    def empty(self):
        return _rdi_liveness_detection_python.TimeSlotList_empty(self)

    def size(self):
        return _rdi_liveness_detection_python.TimeSlotList_size(self)

    def swap(self, v):
        return _rdi_liveness_detection_python.TimeSlotList_swap(self, v)

    def begin(self):
        return _rdi_liveness_detection_python.TimeSlotList_begin(self)

    def end(self):
        return _rdi_liveness_detection_python.TimeSlotList_end(self)

    def rbegin(self):
        return _rdi_liveness_detection_python.TimeSlotList_rbegin(self)

    def rend(self):
        return _rdi_liveness_detection_python.TimeSlotList_rend(self)

    def clear(self):
        return _rdi_liveness_detection_python.TimeSlotList_clear(self)

    def get_allocator(self):
        return _rdi_liveness_detection_python.TimeSlotList_get_allocator(self)

    def pop_back(self):
        return _rdi_liveness_detection_python.TimeSlotList_pop_back(self)

    def erase(self, *args):
        return _rdi_liveness_detection_python.TimeSlotList_erase(self, *args)

    def __init__(self, *args):
        _rdi_liveness_detection_python.TimeSlotList_swiginit(self, _rdi_liveness_detection_python.new_TimeSlotList(*args))

    def push_back(self, x):
        return _rdi_liveness_detection_python.TimeSlotList_push_back(self, x)

    def front(self):
        return _rdi_liveness_detection_python.TimeSlotList_front(self)

    def back(self):
        return _rdi_liveness_detection_python.TimeSlotList_back(self)

    def assign(self, n, x):
        return _rdi_liveness_detection_python.TimeSlotList_assign(self, n, x)

    def resize(self, *args):
        return _rdi_liveness_detection_python.TimeSlotList_resize(self, *args)

    def insert(self, *args):
        return _rdi_liveness_detection_python.TimeSlotList_insert(self, *args)

    def reserve(self, n):
        return _rdi_liveness_detection_python.TimeSlotList_reserve(self, n)

    def capacity(self):
        return _rdi_liveness_detection_python.TimeSlotList_capacity(self)
    __swig_destroy__ = _rdi_liveness_detection_python.delete_TimeSlotList

# Register TimeSlotList in _rdi_liveness_detection_python:
_rdi_liveness_detection_python.TimeSlotList_swigregister(TimeSlotList)



