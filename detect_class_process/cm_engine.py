# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cm_engine_python
else:
    import _cm_engine_python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cm_engine_python.delete_SwigPyIterator

    def value(self):
        return _cm_engine_python.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _cm_engine_python.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _cm_engine_python.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _cm_engine_python.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _cm_engine_python.SwigPyIterator_equal(self, x)

    def copy(self):
        return _cm_engine_python.SwigPyIterator_copy(self)

    def next(self):
        return _cm_engine_python.SwigPyIterator_next(self)

    def __next__(self):
        return _cm_engine_python.SwigPyIterator___next__(self)

    def previous(self):
        return _cm_engine_python.SwigPyIterator_previous(self)

    def advance(self, n):
        return _cm_engine_python.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _cm_engine_python.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _cm_engine_python.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _cm_engine_python.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _cm_engine_python.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _cm_engine_python.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _cm_engine_python.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _cm_engine_python:
_cm_engine_python.SwigPyIterator_swigregister(SwigPyIterator)

class Point(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_cm_engine_python.Point_x_get, _cm_engine_python.Point_x_set)
    y = property(_cm_engine_python.Point_y_get, _cm_engine_python.Point_y_set)
    id = property(_cm_engine_python.Point_id_get, _cm_engine_python.Point_id_set)

    def __init__(self, *args):
        _cm_engine_python.Point_swiginit(self, _cm_engine_python.new_Point(*args))
    __swig_destroy__ = _cm_engine_python.delete_Point

# Register Point in _cm_engine_python:
_cm_engine_python.Point_swigregister(Point)

class Rectangle(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    upper_left = property(_cm_engine_python.Rectangle_upper_left_get, _cm_engine_python.Rectangle_upper_left_set)
    bottom_right = property(_cm_engine_python.Rectangle_bottom_right_get, _cm_engine_python.Rectangle_bottom_right_set)
    id = property(_cm_engine_python.Rectangle_id_get, _cm_engine_python.Rectangle_id_set)

    def __init__(self, *args):
        _cm_engine_python.Rectangle_swiginit(self, _cm_engine_python.new_Rectangle(*args))

    def width(self):
        return _cm_engine_python.Rectangle_width(self)

    def height(self):
        return _cm_engine_python.Rectangle_height(self)

    def area(self):
        return _cm_engine_python.Rectangle_area(self)
    __swig_destroy__ = _cm_engine_python.delete_Rectangle

# Register Rectangle in _cm_engine_python:
_cm_engine_python.Rectangle_swigregister(Rectangle)

class RDI_Error(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    code = property(_cm_engine_python.RDI_Error_code_get, _cm_engine_python.RDI_Error_code_set)
    what = property(_cm_engine_python.RDI_Error_what_get, _cm_engine_python.RDI_Error_what_set)

    def __init__(self):
        _cm_engine_python.RDI_Error_swiginit(self, _cm_engine_python.new_RDI_Error())
    __swig_destroy__ = _cm_engine_python.delete_RDI_Error

# Register RDI_Error in _cm_engine_python:
_cm_engine_python.RDI_Error_swigregister(RDI_Error)

class Image(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    RGB = _cm_engine_python.Image_RGB
    BGR = _cm_engine_python.Image_BGR
    GRAY = _cm_engine_python.Image_GRAY
    BINARY = _cm_engine_python.Image_BINARY

    def __init__(self):
        _cm_engine_python.Image_swiginit(self, _cm_engine_python.new_Image())
    __swig_destroy__ = _cm_engine_python.delete_Image

    def clone(self):
        return _cm_engine_python.Image_clone(self)

    @staticmethod
    def construct(*args):
        return _cm_engine_python.Image_construct(*args)

    def save(self, arg2, overwrite=True):
        return _cm_engine_python.Image_save(self, arg2, overwrite)

    def width(self):
        return _cm_engine_python.Image_width(self)

    def height(self):
        return _cm_engine_python.Image_height(self)

    def channels(self):
        return _cm_engine_python.Image_channels(self)

    def binarize(self, inverse=False):
        return _cm_engine_python.Image_binarize(self, inverse)

    def crop(self, *args):
        return _cm_engine_python.Image_crop(self, *args)

    def get_pixel(self, x, y):
        return _cm_engine_python.Image_get_pixel(self, x, y)

    def resize(self, ratio):
        return _cm_engine_python.Image_resize(self, ratio)

    def resize_and_keep_aspect_ratio(self, max_side_length):
        return _cm_engine_python.Image_resize_and_keep_aspect_ratio(self, max_side_length)

    def draw_rectangles(self, rect, color, thickness):
        return _cm_engine_python.Image_draw_rectangles(self, rect, color, thickness)

    def draw_rectangle(self, rect, color, thickness):
        return _cm_engine_python.Image_draw_rectangle(self, rect, color, thickness)

    def to_grayscale(self):
        return _cm_engine_python.Image_to_grayscale(self)

    def convert_color(self, new_mode):
        return _cm_engine_python.Image_convert_color(self, new_mode)

    def encode_to_jpg(self):
        return _cm_engine_python.Image_encode_to_jpg(self)

    def encode_to_png(self):
        return _cm_engine_python.Image_encode_to_png(self)
    mode = property(_cm_engine_python.Image_mode_get, _cm_engine_python.Image_mode_set)

# Register Image in _cm_engine_python:
_cm_engine_python.Image_swigregister(Image)

def Image_construct(*args):
    return _cm_engine_python.Image_construct(*args)

class Image_Pixel(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    red = property(_cm_engine_python.Image_Pixel_red_get, _cm_engine_python.Image_Pixel_red_set)
    green = property(_cm_engine_python.Image_Pixel_green_get, _cm_engine_python.Image_Pixel_green_set)
    blue = property(_cm_engine_python.Image_Pixel_blue_get, _cm_engine_python.Image_Pixel_blue_set)

    def __init__(self):
        _cm_engine_python.Image_Pixel_swiginit(self, _cm_engine_python.new_Image_Pixel())
    __swig_destroy__ = _cm_engine_python.delete_Image_Pixel

# Register Image_Pixel in _cm_engine_python:
_cm_engine_python.Image_Pixel_swigregister(Image_Pixel)

class ImageResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    result = property(_cm_engine_python.ImageResult_result_get, _cm_engine_python.ImageResult_result_set)
    error = property(_cm_engine_python.ImageResult_error_get, _cm_engine_python.ImageResult_error_set)

    def __init__(self):
        _cm_engine_python.ImageResult_swiginit(self, _cm_engine_python.new_ImageResult())
    __swig_destroy__ = _cm_engine_python.delete_ImageResult

# Register ImageResult in _cm_engine_python:
_cm_engine_python.ImageResult_swigregister(ImageResult)

class RectangleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _cm_engine_python.RectangleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cm_engine_python.RectangleVector___nonzero__(self)

    def __bool__(self):
        return _cm_engine_python.RectangleVector___bool__(self)

    def __len__(self):
        return _cm_engine_python.RectangleVector___len__(self)

    def __getslice__(self, i, j):
        return _cm_engine_python.RectangleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cm_engine_python.RectangleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cm_engine_python.RectangleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cm_engine_python.RectangleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cm_engine_python.RectangleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cm_engine_python.RectangleVector___setitem__(self, *args)

    def pop(self):
        return _cm_engine_python.RectangleVector_pop(self)

    def append(self, x):
        return _cm_engine_python.RectangleVector_append(self, x)

    def empty(self):
        return _cm_engine_python.RectangleVector_empty(self)

    def size(self):
        return _cm_engine_python.RectangleVector_size(self)

    def swap(self, v):
        return _cm_engine_python.RectangleVector_swap(self, v)

    def begin(self):
        return _cm_engine_python.RectangleVector_begin(self)

    def end(self):
        return _cm_engine_python.RectangleVector_end(self)

    def rbegin(self):
        return _cm_engine_python.RectangleVector_rbegin(self)

    def rend(self):
        return _cm_engine_python.RectangleVector_rend(self)

    def clear(self):
        return _cm_engine_python.RectangleVector_clear(self)

    def get_allocator(self):
        return _cm_engine_python.RectangleVector_get_allocator(self)

    def pop_back(self):
        return _cm_engine_python.RectangleVector_pop_back(self)

    def erase(self, *args):
        return _cm_engine_python.RectangleVector_erase(self, *args)

    def __init__(self, *args):
        _cm_engine_python.RectangleVector_swiginit(self, _cm_engine_python.new_RectangleVector(*args))

    def push_back(self, x):
        return _cm_engine_python.RectangleVector_push_back(self, x)

    def front(self):
        return _cm_engine_python.RectangleVector_front(self)

    def back(self):
        return _cm_engine_python.RectangleVector_back(self)

    def assign(self, n, x):
        return _cm_engine_python.RectangleVector_assign(self, n, x)

    def resize(self, *args):
        return _cm_engine_python.RectangleVector_resize(self, *args)

    def insert(self, *args):
        return _cm_engine_python.RectangleVector_insert(self, *args)

    def reserve(self, n):
        return _cm_engine_python.RectangleVector_reserve(self, n)

    def capacity(self):
        return _cm_engine_python.RectangleVector_capacity(self)
    __swig_destroy__ = _cm_engine_python.delete_RectangleVector

# Register RectangleVector in _cm_engine_python:
_cm_engine_python.RectangleVector_swigregister(RectangleVector)

class ImageDataVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _cm_engine_python.ImageDataVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cm_engine_python.ImageDataVector___nonzero__(self)

    def __bool__(self):
        return _cm_engine_python.ImageDataVector___bool__(self)

    def __len__(self):
        return _cm_engine_python.ImageDataVector___len__(self)

    def __getslice__(self, i, j):
        return _cm_engine_python.ImageDataVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cm_engine_python.ImageDataVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cm_engine_python.ImageDataVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cm_engine_python.ImageDataVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cm_engine_python.ImageDataVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cm_engine_python.ImageDataVector___setitem__(self, *args)

    def pop(self):
        return _cm_engine_python.ImageDataVector_pop(self)

    def append(self, x):
        return _cm_engine_python.ImageDataVector_append(self, x)

    def empty(self):
        return _cm_engine_python.ImageDataVector_empty(self)

    def size(self):
        return _cm_engine_python.ImageDataVector_size(self)

    def swap(self, v):
        return _cm_engine_python.ImageDataVector_swap(self, v)

    def begin(self):
        return _cm_engine_python.ImageDataVector_begin(self)

    def end(self):
        return _cm_engine_python.ImageDataVector_end(self)

    def rbegin(self):
        return _cm_engine_python.ImageDataVector_rbegin(self)

    def rend(self):
        return _cm_engine_python.ImageDataVector_rend(self)

    def clear(self):
        return _cm_engine_python.ImageDataVector_clear(self)

    def get_allocator(self):
        return _cm_engine_python.ImageDataVector_get_allocator(self)

    def pop_back(self):
        return _cm_engine_python.ImageDataVector_pop_back(self)

    def erase(self, *args):
        return _cm_engine_python.ImageDataVector_erase(self, *args)

    def __init__(self, *args):
        _cm_engine_python.ImageDataVector_swiginit(self, _cm_engine_python.new_ImageDataVector(*args))

    def push_back(self, x):
        return _cm_engine_python.ImageDataVector_push_back(self, x)

    def front(self):
        return _cm_engine_python.ImageDataVector_front(self)

    def back(self):
        return _cm_engine_python.ImageDataVector_back(self)

    def assign(self, n, x):
        return _cm_engine_python.ImageDataVector_assign(self, n, x)

    def resize(self, *args):
        return _cm_engine_python.ImageDataVector_resize(self, *args)

    def insert(self, *args):
        return _cm_engine_python.ImageDataVector_insert(self, *args)

    def reserve(self, n):
        return _cm_engine_python.ImageDataVector_reserve(self, n)

    def capacity(self):
        return _cm_engine_python.ImageDataVector_capacity(self)
    __swig_destroy__ = _cm_engine_python.delete_ImageDataVector

# Register ImageDataVector in _cm_engine_python:
_cm_engine_python.ImageDataVector_swigregister(ImageDataVector)


def initialize_model(layout_model_path, recogn_model_path):
    return _cm_engine_python.initialize_model(layout_model_path, recogn_model_path)

def deinitialize_model(layout_model_path, recogn_model_path):
    return _cm_engine_python.deinitialize_model(layout_model_path, recogn_model_path)

def detect_card(*args):
    return _cm_engine_python.detect_card(*args)

def detect_multi_cards(image, model_path, inference_threads=8, uniquify=True):
    return _cm_engine_python.detect_multi_cards(image, model_path, inference_threads, uniquify)

def recognize_text_fields(fields, recognition_model_path, recognitoin_threads=12, use_double_inference=True):
    return _cm_engine_python.recognize_text_fields(fields, recognition_model_path, recognitoin_threads, use_double_inference)

def recognize_card(*args):
    return _cm_engine_python.recognize_card(*args)

def get_blur_percentage(image, model_path):
    return _cm_engine_python.get_blur_percentage(image, model_path)

def get_release_version():
    return _cm_engine_python.get_release_version()

def get_model_information(model_path):
    return _cm_engine_python.get_model_information(model_path)

def apply_model_classifier(image, model_path, inference_threads=8):
    return _cm_engine_python.apply_model_classifier(image, model_path, inference_threads)
CARD_SIDE_NON = _cm_engine_python.CARD_SIDE_NON
class Field(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    image = property(_cm_engine_python.Field_image_get, _cm_engine_python.Field_image_set)
    label = property(_cm_engine_python.Field_label_get, _cm_engine_python.Field_label_set)
    polygon = property(_cm_engine_python.Field_polygon_get, _cm_engine_python.Field_polygon_set)

    def __init__(self):
        _cm_engine_python.Field_swiginit(self, _cm_engine_python.new_Field())
    __swig_destroy__ = _cm_engine_python.delete_Field

# Register Field in _cm_engine_python:
_cm_engine_python.Field_swigregister(Field)

class Card(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    warped_card = property(_cm_engine_python.Card_warped_card_get, _cm_engine_python.Card_warped_card_set)
    polygon = property(_cm_engine_python.Card_polygon_get, _cm_engine_python.Card_polygon_set)
    type = property(_cm_engine_python.Card_type_get, _cm_engine_python.Card_type_set)
    fields = property(_cm_engine_python.Card_fields_get, _cm_engine_python.Card_fields_set)

    def __init__(self):
        _cm_engine_python.Card_swiginit(self, _cm_engine_python.new_Card())
    __swig_destroy__ = _cm_engine_python.delete_Card

# Register Card in _cm_engine_python:
_cm_engine_python.Card_swigregister(Card)

class RecognizedTextField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_cm_engine_python.RecognizedTextField_type_get, _cm_engine_python.RecognizedTextField_type_set)
    value = property(_cm_engine_python.RecognizedTextField_value_get, _cm_engine_python.RecognizedTextField_value_set)
    confidence = property(_cm_engine_python.RecognizedTextField_confidence_get, _cm_engine_python.RecognizedTextField_confidence_set)

    def __init__(self):
        _cm_engine_python.RecognizedTextField_swiginit(self, _cm_engine_python.new_RecognizedTextField())
    __swig_destroy__ = _cm_engine_python.delete_RecognizedTextField

# Register RecognizedTextField in _cm_engine_python:
_cm_engine_python.RecognizedTextField_swigregister(RecognizedTextField)

class RecognizedImageField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_cm_engine_python.RecognizedImageField_type_get, _cm_engine_python.RecognizedImageField_type_set)
    image = property(_cm_engine_python.RecognizedImageField_image_get, _cm_engine_python.RecognizedImageField_image_set)

    def __init__(self):
        _cm_engine_python.RecognizedImageField_swiginit(self, _cm_engine_python.new_RecognizedImageField())
    __swig_destroy__ = _cm_engine_python.delete_RecognizedImageField

# Register RecognizedImageField in _cm_engine_python:
_cm_engine_python.RecognizedImageField_swigregister(RecognizedImageField)

class RecognizedCard(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    warped_card = property(_cm_engine_python.RecognizedCard_warped_card_get, _cm_engine_python.RecognizedCard_warped_card_set)
    text_fields = property(_cm_engine_python.RecognizedCard_text_fields_get, _cm_engine_python.RecognizedCard_text_fields_set)
    image_fields = property(_cm_engine_python.RecognizedCard_image_fields_get, _cm_engine_python.RecognizedCard_image_fields_set)
    blur_percent = property(_cm_engine_python.RecognizedCard_blur_percent_get, _cm_engine_python.RecognizedCard_blur_percent_set)

    def __init__(self):
        _cm_engine_python.RecognizedCard_swiginit(self, _cm_engine_python.new_RecognizedCard())
    __swig_destroy__ = _cm_engine_python.delete_RecognizedCard

# Register RecognizedCard in _cm_engine_python:
_cm_engine_python.RecognizedCard_swigregister(RecognizedCard)

class FloatResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    result = property(_cm_engine_python.FloatResult_result_get, _cm_engine_python.FloatResult_result_set)
    error = property(_cm_engine_python.FloatResult_error_get, _cm_engine_python.FloatResult_error_set)

    def __init__(self):
        _cm_engine_python.FloatResult_swiginit(self, _cm_engine_python.new_FloatResult())
    __swig_destroy__ = _cm_engine_python.delete_FloatResult

# Register FloatResult in _cm_engine_python:
_cm_engine_python.FloatResult_swigregister(FloatResult)

class PointVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _cm_engine_python.PointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cm_engine_python.PointVector___nonzero__(self)

    def __bool__(self):
        return _cm_engine_python.PointVector___bool__(self)

    def __len__(self):
        return _cm_engine_python.PointVector___len__(self)

    def __getslice__(self, i, j):
        return _cm_engine_python.PointVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cm_engine_python.PointVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cm_engine_python.PointVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cm_engine_python.PointVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cm_engine_python.PointVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cm_engine_python.PointVector___setitem__(self, *args)

    def pop(self):
        return _cm_engine_python.PointVector_pop(self)

    def append(self, x):
        return _cm_engine_python.PointVector_append(self, x)

    def empty(self):
        return _cm_engine_python.PointVector_empty(self)

    def size(self):
        return _cm_engine_python.PointVector_size(self)

    def swap(self, v):
        return _cm_engine_python.PointVector_swap(self, v)

    def begin(self):
        return _cm_engine_python.PointVector_begin(self)

    def end(self):
        return _cm_engine_python.PointVector_end(self)

    def rbegin(self):
        return _cm_engine_python.PointVector_rbegin(self)

    def rend(self):
        return _cm_engine_python.PointVector_rend(self)

    def clear(self):
        return _cm_engine_python.PointVector_clear(self)

    def get_allocator(self):
        return _cm_engine_python.PointVector_get_allocator(self)

    def pop_back(self):
        return _cm_engine_python.PointVector_pop_back(self)

    def erase(self, *args):
        return _cm_engine_python.PointVector_erase(self, *args)

    def __init__(self, *args):
        _cm_engine_python.PointVector_swiginit(self, _cm_engine_python.new_PointVector(*args))

    def push_back(self, x):
        return _cm_engine_python.PointVector_push_back(self, x)

    def front(self):
        return _cm_engine_python.PointVector_front(self)

    def back(self):
        return _cm_engine_python.PointVector_back(self)

    def assign(self, n, x):
        return _cm_engine_python.PointVector_assign(self, n, x)

    def resize(self, *args):
        return _cm_engine_python.PointVector_resize(self, *args)

    def insert(self, *args):
        return _cm_engine_python.PointVector_insert(self, *args)

    def reserve(self, n):
        return _cm_engine_python.PointVector_reserve(self, n)

    def capacity(self):
        return _cm_engine_python.PointVector_capacity(self)
    __swig_destroy__ = _cm_engine_python.delete_PointVector

# Register PointVector in _cm_engine_python:
_cm_engine_python.PointVector_swigregister(PointVector)

class ResultString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    result = property(_cm_engine_python.ResultString_result_get, _cm_engine_python.ResultString_result_set)
    error = property(_cm_engine_python.ResultString_error_get, _cm_engine_python.ResultString_error_set)

    def __init__(self):
        _cm_engine_python.ResultString_swiginit(self, _cm_engine_python.new_ResultString())
    __swig_destroy__ = _cm_engine_python.delete_ResultString

# Register ResultString in _cm_engine_python:
_cm_engine_python.ResultString_swigregister(ResultString)

class FieldVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _cm_engine_python.FieldVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cm_engine_python.FieldVector___nonzero__(self)

    def __bool__(self):
        return _cm_engine_python.FieldVector___bool__(self)

    def __len__(self):
        return _cm_engine_python.FieldVector___len__(self)

    def __getslice__(self, i, j):
        return _cm_engine_python.FieldVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cm_engine_python.FieldVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cm_engine_python.FieldVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cm_engine_python.FieldVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cm_engine_python.FieldVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cm_engine_python.FieldVector___setitem__(self, *args)

    def pop(self):
        return _cm_engine_python.FieldVector_pop(self)

    def append(self, x):
        return _cm_engine_python.FieldVector_append(self, x)

    def empty(self):
        return _cm_engine_python.FieldVector_empty(self)

    def size(self):
        return _cm_engine_python.FieldVector_size(self)

    def swap(self, v):
        return _cm_engine_python.FieldVector_swap(self, v)

    def begin(self):
        return _cm_engine_python.FieldVector_begin(self)

    def end(self):
        return _cm_engine_python.FieldVector_end(self)

    def rbegin(self):
        return _cm_engine_python.FieldVector_rbegin(self)

    def rend(self):
        return _cm_engine_python.FieldVector_rend(self)

    def clear(self):
        return _cm_engine_python.FieldVector_clear(self)

    def get_allocator(self):
        return _cm_engine_python.FieldVector_get_allocator(self)

    def pop_back(self):
        return _cm_engine_python.FieldVector_pop_back(self)

    def erase(self, *args):
        return _cm_engine_python.FieldVector_erase(self, *args)

    def __init__(self, *args):
        _cm_engine_python.FieldVector_swiginit(self, _cm_engine_python.new_FieldVector(*args))

    def push_back(self, x):
        return _cm_engine_python.FieldVector_push_back(self, x)

    def front(self):
        return _cm_engine_python.FieldVector_front(self)

    def back(self):
        return _cm_engine_python.FieldVector_back(self)

    def assign(self, n, x):
        return _cm_engine_python.FieldVector_assign(self, n, x)

    def resize(self, *args):
        return _cm_engine_python.FieldVector_resize(self, *args)

    def insert(self, *args):
        return _cm_engine_python.FieldVector_insert(self, *args)

    def reserve(self, n):
        return _cm_engine_python.FieldVector_reserve(self, n)

    def capacity(self):
        return _cm_engine_python.FieldVector_capacity(self)
    __swig_destroy__ = _cm_engine_python.delete_FieldVector

# Register FieldVector in _cm_engine_python:
_cm_engine_python.FieldVector_swigregister(FieldVector)

class CardResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    result = property(_cm_engine_python.CardResult_result_get, _cm_engine_python.CardResult_result_set)
    error = property(_cm_engine_python.CardResult_error_get, _cm_engine_python.CardResult_error_set)

    def __init__(self):
        _cm_engine_python.CardResult_swiginit(self, _cm_engine_python.new_CardResult())
    __swig_destroy__ = _cm_engine_python.delete_CardResult

# Register CardResult in _cm_engine_python:
_cm_engine_python.CardResult_swigregister(CardResult)

class CardVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _cm_engine_python.CardVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cm_engine_python.CardVector___nonzero__(self)

    def __bool__(self):
        return _cm_engine_python.CardVector___bool__(self)

    def __len__(self):
        return _cm_engine_python.CardVector___len__(self)

    def __getslice__(self, i, j):
        return _cm_engine_python.CardVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cm_engine_python.CardVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cm_engine_python.CardVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cm_engine_python.CardVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cm_engine_python.CardVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cm_engine_python.CardVector___setitem__(self, *args)

    def pop(self):
        return _cm_engine_python.CardVector_pop(self)

    def append(self, x):
        return _cm_engine_python.CardVector_append(self, x)

    def empty(self):
        return _cm_engine_python.CardVector_empty(self)

    def size(self):
        return _cm_engine_python.CardVector_size(self)

    def swap(self, v):
        return _cm_engine_python.CardVector_swap(self, v)

    def begin(self):
        return _cm_engine_python.CardVector_begin(self)

    def end(self):
        return _cm_engine_python.CardVector_end(self)

    def rbegin(self):
        return _cm_engine_python.CardVector_rbegin(self)

    def rend(self):
        return _cm_engine_python.CardVector_rend(self)

    def clear(self):
        return _cm_engine_python.CardVector_clear(self)

    def get_allocator(self):
        return _cm_engine_python.CardVector_get_allocator(self)

    def pop_back(self):
        return _cm_engine_python.CardVector_pop_back(self)

    def erase(self, *args):
        return _cm_engine_python.CardVector_erase(self, *args)

    def __init__(self, *args):
        _cm_engine_python.CardVector_swiginit(self, _cm_engine_python.new_CardVector(*args))

    def push_back(self, x):
        return _cm_engine_python.CardVector_push_back(self, x)

    def front(self):
        return _cm_engine_python.CardVector_front(self)

    def back(self):
        return _cm_engine_python.CardVector_back(self)

    def assign(self, n, x):
        return _cm_engine_python.CardVector_assign(self, n, x)

    def resize(self, *args):
        return _cm_engine_python.CardVector_resize(self, *args)

    def insert(self, *args):
        return _cm_engine_python.CardVector_insert(self, *args)

    def reserve(self, n):
        return _cm_engine_python.CardVector_reserve(self, n)

    def capacity(self):
        return _cm_engine_python.CardVector_capacity(self)
    __swig_destroy__ = _cm_engine_python.delete_CardVector

# Register CardVector in _cm_engine_python:
_cm_engine_python.CardVector_swigregister(CardVector)

class CardVectorResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    result = property(_cm_engine_python.CardVectorResult_result_get, _cm_engine_python.CardVectorResult_result_set)
    error = property(_cm_engine_python.CardVectorResult_error_get, _cm_engine_python.CardVectorResult_error_set)

    def __init__(self):
        _cm_engine_python.CardVectorResult_swiginit(self, _cm_engine_python.new_CardVectorResult())
    __swig_destroy__ = _cm_engine_python.delete_CardVectorResult

# Register CardVectorResult in _cm_engine_python:
_cm_engine_python.CardVectorResult_swigregister(CardVectorResult)

class RecognizedTextFields(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _cm_engine_python.RecognizedTextFields_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cm_engine_python.RecognizedTextFields___nonzero__(self)

    def __bool__(self):
        return _cm_engine_python.RecognizedTextFields___bool__(self)

    def __len__(self):
        return _cm_engine_python.RecognizedTextFields___len__(self)

    def __getslice__(self, i, j):
        return _cm_engine_python.RecognizedTextFields___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cm_engine_python.RecognizedTextFields___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cm_engine_python.RecognizedTextFields___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cm_engine_python.RecognizedTextFields___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cm_engine_python.RecognizedTextFields___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cm_engine_python.RecognizedTextFields___setitem__(self, *args)

    def pop(self):
        return _cm_engine_python.RecognizedTextFields_pop(self)

    def append(self, x):
        return _cm_engine_python.RecognizedTextFields_append(self, x)

    def empty(self):
        return _cm_engine_python.RecognizedTextFields_empty(self)

    def size(self):
        return _cm_engine_python.RecognizedTextFields_size(self)

    def swap(self, v):
        return _cm_engine_python.RecognizedTextFields_swap(self, v)

    def begin(self):
        return _cm_engine_python.RecognizedTextFields_begin(self)

    def end(self):
        return _cm_engine_python.RecognizedTextFields_end(self)

    def rbegin(self):
        return _cm_engine_python.RecognizedTextFields_rbegin(self)

    def rend(self):
        return _cm_engine_python.RecognizedTextFields_rend(self)

    def clear(self):
        return _cm_engine_python.RecognizedTextFields_clear(self)

    def get_allocator(self):
        return _cm_engine_python.RecognizedTextFields_get_allocator(self)

    def pop_back(self):
        return _cm_engine_python.RecognizedTextFields_pop_back(self)

    def erase(self, *args):
        return _cm_engine_python.RecognizedTextFields_erase(self, *args)

    def __init__(self, *args):
        _cm_engine_python.RecognizedTextFields_swiginit(self, _cm_engine_python.new_RecognizedTextFields(*args))

    def push_back(self, x):
        return _cm_engine_python.RecognizedTextFields_push_back(self, x)

    def front(self):
        return _cm_engine_python.RecognizedTextFields_front(self)

    def back(self):
        return _cm_engine_python.RecognizedTextFields_back(self)

    def assign(self, n, x):
        return _cm_engine_python.RecognizedTextFields_assign(self, n, x)

    def resize(self, *args):
        return _cm_engine_python.RecognizedTextFields_resize(self, *args)

    def insert(self, *args):
        return _cm_engine_python.RecognizedTextFields_insert(self, *args)

    def reserve(self, n):
        return _cm_engine_python.RecognizedTextFields_reserve(self, n)

    def capacity(self):
        return _cm_engine_python.RecognizedTextFields_capacity(self)
    __swig_destroy__ = _cm_engine_python.delete_RecognizedTextFields

# Register RecognizedTextFields in _cm_engine_python:
_cm_engine_python.RecognizedTextFields_swigregister(RecognizedTextFields)

class RecognizedImageFields(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _cm_engine_python.RecognizedImageFields_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cm_engine_python.RecognizedImageFields___nonzero__(self)

    def __bool__(self):
        return _cm_engine_python.RecognizedImageFields___bool__(self)

    def __len__(self):
        return _cm_engine_python.RecognizedImageFields___len__(self)

    def __getslice__(self, i, j):
        return _cm_engine_python.RecognizedImageFields___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cm_engine_python.RecognizedImageFields___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cm_engine_python.RecognizedImageFields___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cm_engine_python.RecognizedImageFields___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cm_engine_python.RecognizedImageFields___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cm_engine_python.RecognizedImageFields___setitem__(self, *args)

    def pop(self):
        return _cm_engine_python.RecognizedImageFields_pop(self)

    def append(self, x):
        return _cm_engine_python.RecognizedImageFields_append(self, x)

    def empty(self):
        return _cm_engine_python.RecognizedImageFields_empty(self)

    def size(self):
        return _cm_engine_python.RecognizedImageFields_size(self)

    def swap(self, v):
        return _cm_engine_python.RecognizedImageFields_swap(self, v)

    def begin(self):
        return _cm_engine_python.RecognizedImageFields_begin(self)

    def end(self):
        return _cm_engine_python.RecognizedImageFields_end(self)

    def rbegin(self):
        return _cm_engine_python.RecognizedImageFields_rbegin(self)

    def rend(self):
        return _cm_engine_python.RecognizedImageFields_rend(self)

    def clear(self):
        return _cm_engine_python.RecognizedImageFields_clear(self)

    def get_allocator(self):
        return _cm_engine_python.RecognizedImageFields_get_allocator(self)

    def pop_back(self):
        return _cm_engine_python.RecognizedImageFields_pop_back(self)

    def erase(self, *args):
        return _cm_engine_python.RecognizedImageFields_erase(self, *args)

    def __init__(self, *args):
        _cm_engine_python.RecognizedImageFields_swiginit(self, _cm_engine_python.new_RecognizedImageFields(*args))

    def push_back(self, x):
        return _cm_engine_python.RecognizedImageFields_push_back(self, x)

    def front(self):
        return _cm_engine_python.RecognizedImageFields_front(self)

    def back(self):
        return _cm_engine_python.RecognizedImageFields_back(self)

    def assign(self, n, x):
        return _cm_engine_python.RecognizedImageFields_assign(self, n, x)

    def resize(self, *args):
        return _cm_engine_python.RecognizedImageFields_resize(self, *args)

    def insert(self, *args):
        return _cm_engine_python.RecognizedImageFields_insert(self, *args)

    def reserve(self, n):
        return _cm_engine_python.RecognizedImageFields_reserve(self, n)

    def capacity(self):
        return _cm_engine_python.RecognizedImageFields_capacity(self)
    __swig_destroy__ = _cm_engine_python.delete_RecognizedImageFields

# Register RecognizedImageFields in _cm_engine_python:
_cm_engine_python.RecognizedImageFields_swigregister(RecognizedImageFields)

class RecognizedTextFieldsResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    result = property(_cm_engine_python.RecognizedTextFieldsResult_result_get, _cm_engine_python.RecognizedTextFieldsResult_result_set)
    error = property(_cm_engine_python.RecognizedTextFieldsResult_error_get, _cm_engine_python.RecognizedTextFieldsResult_error_set)

    def __init__(self):
        _cm_engine_python.RecognizedTextFieldsResult_swiginit(self, _cm_engine_python.new_RecognizedTextFieldsResult())
    __swig_destroy__ = _cm_engine_python.delete_RecognizedTextFieldsResult

# Register RecognizedTextFieldsResult in _cm_engine_python:
_cm_engine_python.RecognizedTextFieldsResult_swigregister(RecognizedTextFieldsResult)

class RecognizedCardResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    result = property(_cm_engine_python.RecognizedCardResult_result_get, _cm_engine_python.RecognizedCardResult_result_set)
    error = property(_cm_engine_python.RecognizedCardResult_error_get, _cm_engine_python.RecognizedCardResult_error_set)

    def __init__(self):
        _cm_engine_python.RecognizedCardResult_swiginit(self, _cm_engine_python.new_RecognizedCardResult())
    __swig_destroy__ = _cm_engine_python.delete_RecognizedCardResult

# Register RecognizedCardResult in _cm_engine_python:
_cm_engine_python.RecognizedCardResult_swigregister(RecognizedCardResult)

class ClassifierResult(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    result = property(_cm_engine_python.ClassifierResult_result_get, _cm_engine_python.ClassifierResult_result_set)
    error = property(_cm_engine_python.ClassifierResult_error_get, _cm_engine_python.ClassifierResult_error_set)

    def __init__(self):
        _cm_engine_python.ClassifierResult_swiginit(self, _cm_engine_python.new_ClassifierResult())
    __swig_destroy__ = _cm_engine_python.delete_ClassifierResult

# Register ClassifierResult in _cm_engine_python:
_cm_engine_python.ClassifierResult_swigregister(ClassifierResult)



